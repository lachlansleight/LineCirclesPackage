using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace LineCircles
{
	/// <summary>
	/// Class used to shuffle the oscillator and other values of a LineCircle
	/// </summary>
	[System.Serializable]
	public class Shuffler : MonoBehaviour
	{

		/// <summary>
		/// Whether to shuffle automatically
		/// </summary>
		[Header("Settings")]
		[Tooltip("Whether to shuffle automatically")]
		public bool DoAutoShuffle = false;

		/// <summary>
		/// Whether we allow the right and left arrow keys to move between Patterns
		/// </summary>
		[Tooltip("Whether to shuffle automatically")]
		public bool AcceptsKeyboardInput = false;

		/// <summary>
		/// How long in seconds between auto shuffles
		/// </summary>
		[Tooltip("How long in seconds between auto shuffles")]
		public float AutoShufflePeriod = 20f;

		/// <summary>
		/// Percentage of auto shuffle time (at each end) the line circle will fade out / in during
		/// </summary>
		[Tooltip("Percentage of auto shuffle time (at each end) the line circle will fade out / in during")]
		public float FadeoutDuration = 0.05f;

		/// <summary>
		/// Current position in auto-shuffle period
		/// </summary>
		[Range(0f, 1f)]
		[Tooltip("Current position in auto-shuffle period")]
		public float CurrentAutoShuffleTime = 0f;

		/// <summary>
		/// The Pattern Generator used to generate...patterns...
		/// </summary>
		[Tooltip("The Pattern Generator used to generate...patterns...")]
		public PatternGenerator Generator;

		/// <summary>
		/// Record of previous patterns generated by this shuffler
		/// </summary>
		[Tooltip("Record of previous patterns generated by this shuffler")]
		public PatternMemory Memory;

		[Header("Debug")]
		public float StartTimeSpan = 0f;

		/// <summary>
		/// The target LineCircle object to be shuffled
		/// </summary>
		[Header("References")]
		[Tooltip("The target LineCircle object to be shuffled")]
		private LineCircle _lineCircle;

		private void OnEnable()
		{
			Generator.Count = Mathf.CeilToInt(AutoShufflePeriod * 100f);

			Memory = new PatternMemory();
			Memory.Patterns.Add(Generator.GenerateNewPattern());
			Memory.CurrentPosition = Memory.Patterns.Count - 1;

			_lineCircle = GetComponent<LineCircle>();
			if (_lineCircle == null) {
				Debug.LogError("Shuffler couldn't find an attached LineCircle component! Disabling.");
				enabled = false;
				return;
			}

			_lineCircle.SetPattern(new LineCirclePattern(Memory.Patterns[Memory.CurrentPosition]) {
				TimeSpan = StartTimeSpan
			});
		}

		private void Start()
		{
			NextPattern();
		}

		private void Update()
		{
			if (AcceptsKeyboardInput) {
				//On left arrow, move backwards through positions
				if (Input.GetKeyDown(KeyCode.LeftArrow)) {
					PreviousPattern();
					//On right arrow, move forwards through positions
				} else if (Input.GetKeyDown(KeyCode.RightArrow)) {
					NextPattern();
				}
			}

			//And shuffle automatically if it's turned on and time
			if (!DoAutoShuffle) return;
			
			CurrentAutoShuffleTime += Time.deltaTime / AutoShufflePeriod;
			if (CurrentAutoShuffleTime < FadeoutDuration) {
				_lineCircle.AlphaMultiplier = Mathf.Clamp01(CurrentAutoShuffleTime / FadeoutDuration);
			} else if (CurrentAutoShuffleTime > 1f - FadeoutDuration) {
				_lineCircle.AlphaMultiplier = Mathf.Clamp01((1f - CurrentAutoShuffleTime) / FadeoutDuration);
			} else {
				_lineCircle.AlphaMultiplier = 1f;
			}
			
			if (CurrentAutoShuffleTime >= 1f) {
				GetNewPattern();
			}
		}

        
		public void NextPattern()
		{
			if (Memory.CurrentPosition < (Memory.Patterns.Count - 1)) {
				Memory.CurrentPosition++;

				_lineCircle.SetPattern(new LineCirclePattern(Memory.Patterns[Memory.CurrentPosition]));
				_lineCircle.Pattern.TimeSpan = StartTimeSpan;

				CurrentAutoShuffleTime = 0f;
				//or generate a new pattern if we're already at the end
			} else {
				GetNewPattern();
			}
		}

        
		public void PreviousPattern()
		{
			if (Memory.CurrentPosition <= 0) return;
			
			Memory.CurrentPosition--;

			_lineCircle.SetPattern(new LineCirclePattern(Memory.Patterns[Memory.CurrentPosition]));
			_lineCircle.Pattern.TimeSpan = StartTimeSpan;

			CurrentAutoShuffleTime = 0f;
		}

		private void GetNewPattern()
		{
			Memory.Patterns.Add(Generator.GenerateNewPattern());
			Memory.CurrentPosition = Memory.Patterns.Count - 1;

			_lineCircle.SetPattern(new LineCirclePattern(Memory.Patterns[Memory.CurrentPosition]));
			_lineCircle.Pattern.TimeSpan = StartTimeSpan;

			CurrentAutoShuffleTime = 0f;
		}
	}
}